# SPDX-License-Identifier: GPL-2.0
# ===========================================================================
# arch/um: Generic definitions
# ===========================================================================

USER_SINGLE_OBJS := \
	$(foreach f,$(patsubst %.o,%,$(obj-y)),$($(f)-objs))
USER_OBJS += $(filter %_user.o,$(obj-y) $(USER_SINGLE_OBJS))
USER_OBJS := $(foreach file,$(USER_OBJS),$(obj)/$(file))

$(USER_OBJS:.o=.%): \
	c_flags = -Wp,-MD,$(depfile) $(USER_CFLAGS) -include $(srctree)/include/linux/kern_levels.h -include user.h $(CFLAGS_$(basetarget).o)

# These are like USER_OBJS but filter USER_CFLAGS through unprofile instead of
# using it directly.
UNPROFILE_OBJS := $(foreach file,$(UNPROFILE_OBJS),$(obj)/$(file))

$(UNPROFILE_OBJS:.o=.%): \
	c_flags = -Wp,-MD,$(depfile) $(call unprofile,$(USER_CFLAGS)) $(CFLAGS_$(basetarget).o)

$(USER_OBJS) $(UNPROFILE_OBJS): \
	CHECKFLAGS := $(patsubst $(NOSTDINC_FLAGS),,$(CHECKFLAGS))

# The stubs can't try to call mcount or update basic block data
define unprofile
	$(patsubst -pg,,$(patsubst -fprofile-arcs -ftest-coverage,,$(1)))
endef

ifneq ($(subarch-y),)
subarch-y := $(patsubst %/, %/built-in.a, $(subarch-y))
real-subarch-y := $(call real-search, $(subarch-y), .o, -objs -y)
subdir-subarch := $(sort $(filter %/built-in.a, $(real-subarch-y)))

$(addprefix $(obj)/,$(subdir-subarch)):
	$(Q)$(MAKE) $(build)=$(addprefix $(obj)/,$(patsubst %/,%,$(dir $@))) need-builtin=1 need-modorder=1
quiet_cmd_ld_subarch.o = LD      $@
	cmd_ld_subarch.o = $(LD) ${KBUILD_LDFLAGS} -r -o $@ --whole-archive $(filter-out FORCE,$^)
$(obj)/subarch.o: $(addprefix $(obj)/,$(subarch-y)) FORCE
	$(call if_changed,ld_subarch.o)

targets += subarch.o $(subarch-y)

subdir- += $(foreach m,$(subdir-subarch),$(patsubst %/,%,$(dir m)))
endif
